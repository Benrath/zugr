askgpt:::document_code()
askgpt:::document_code()
as.Date("2023-10-09")
start=as.Date("2023-10-09")
format(start, "%Y-%m-%dT%H:%M:%S")
start <- "2023-10-10"
start <- lubridate::ymd_hms(start)
devtools::document()
usethis::use_readme_rmd()
search_station("Wiesbaden")
library(zugr)
library(zugr)
search_station("Wiesbaden")
wi <- search_station("Wiesbaden")
wi <- search_station("Amsterdam", n_res = 1)
View(wi)
adam <- search_station("Amsterdam", n_res = 1)
adam
wi <- search_station("Wiesbaden")
wi <- search_station("Wiesbaden")
wi
next_tuesday <- bahn_search(
from = wi$id[1],
to = adam$id[1],
start = "2023-10-03T00:00:00",
end =  "2023-10-03T23:59:59"
)
next_tuesday <- bahn_search(
from = wi$id[1],
to = adam$id[1],
start = "2023-10-03T00:00:00",
end =  "2023-10-03T23:59:59"
)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
out.width = "100%"
)
library(zugr)
wi <- search_station("Wiesbaden")
wi
adam <- search_station("Amsterdam", n_res = 1)
adam
next_tuesday <- bahn_search(
from = wi$id[1],
to = adam$id[1],
start = "2023-10-03T00:00:00",
end =  "2023-10-03T23:59:59"
)
devtools::load_all(".")
next_tuesday <- bahn_search(
from = wi$id[1],
to = adam$id[1],
start = "2023-10-03T05:00:00",
end =  "2023-10-03T11:00:00"
)
next_tuesday <- bahn_search(
from = wi$id[1],
to = adam$id[1],
start = "2023-10-03T05:00:00",
end =  "2023-10-03T11:00:00",
parse = F
)
x <- next_tuesday
purrr::map(x[["verbindungen"]], function(v) {
n_abschnitt <- length(v[["verbindungsAbschnitte"]])
tibble::tibble(
id = v[["tripId"]],
duration = v[["verbindungsDauerInSeconds"]],
price = v[["angebotsPreis"]][["betrag"]],
changes = v[["umstiegsAnzahl"]],
start = v[["verbindungsAbschnitte"]][[1]][["ankunftsZeitpunkt"]],
end = v[["verbindungsAbschnitte"]][[n_abschnitt]][["ankunftsZeitpunkt"]]
)
}) |>
dplyr::bind_rows()
purrr::map(x[["verbindungen"]], function(v) {
n_abschnitt <- length(v[["verbindungsAbschnitte"]])
tibble::tibble(
id = v[["tripId"]],
duration = v[["verbindungsDauerInSeconds"]],
price = v[["angebotsPreis"]][["betrag"]],
changes = v[["umstiegsAnzahl"]],
start = v[["verbindungsAbschnitte"]][[1]][["ankunftsZeitpunkt"]],
end = v[["verbindungsAbschnitte"]][[n_abschnitt]][["ankunftsZeitpunkt"]]
)
}) |>
dplyr::bind_rows() |>
dplyr::mutate(
start = lubridate::force_tz(lubridate::ymd_hms(start), "Europe/Berlin"),
end = lubridate::force_tz(lubridate::ymd_hms(end), "Europe/Berlin"),
duration = lubridate::as.duration(duration)
)
v <- tail(x[["verbindungen"]], 1)
a <- tail(v[[1]][["verbindungsAbschnitte"]], 1)
lubridate::ymd_hms(a[[1]][["ankunftsZeitpunkt"]]) |>
lubridate::force_tz("Europe/Berlin")
next_tuesday <- bahn_search(
from = wi$id[1],
to = adam$id[1],
start = "2023-10-03T05:00:00",
end =  "2023-10-03T11:00:00",
parse = F
)
next_tuesday <- bahn_search(
from = wi$id[1],
to = adam$id[1],
start = "2023-10-03T05:00:00",
end =  "2023-10-03T11:00:00",
parse = T
)
res <- next_tuesday
parse_response(res)
devtools::load_all(".")
next_tuesday <- bahn_search(
from = wi$id[1],
to = adam$id[1],
start = "2023-10-03T05:00:00",
end =  "2023-10-03T11:00:00",
parse = T
)
next_tuesday <- bahn_search(
from = wi$id[1],
to = adam$id[1],
start = "2023-10-03T05:00:00",
end =  "2023-10-03T11:00:00",
parse = F
)
res <- next_tuesday
parse_response(res)
purrr::map(x[["verbindungen"]], function(v) {
n_abschnitt <- length(v[["verbindungsAbschnitte"]])
tibble::tibble(
id = v[["tripId"]],
duration = v[["verbindungsDauerInSeconds"]],
price = v[["angebotsPreis"]][["betrag"]],
changes = v[["umstiegsAnzahl"]],
start = v[["verbindungsAbschnitte"]][[1]][["ankunftsZeitpunkt"]],
end = v[["verbindungsAbschnitte"]][[n_abschnitt]][["ankunftsZeitpunkt"]]
)
}) |>
dplyr::bind_rows() |>
dplyr::mutate(
start = lubridate::force_tz(lubridate::ymd_hms(start), "Europe/Berlin"),
end = lubridate::force_tz(lubridate::ymd_hms(end), "Europe/Berlin"),
duration = lubridate::as.duration(duration)
)
library(zugr)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
out.width = "100%"
)
library(zugr)
wi <- search_station("Wiesbaden")
wi
adam <- search_station("Amsterdam", n_res = 1)
adam
next_tuesday <- bahn_search(
from = wi$id[1],
to = adam$id[1],
start = "2023-10-03T05:00:00",
end =  "2023-10-03T11:00:00"
)
res <- bahn_search(
from = wi$id[1],
to = adam$id[1],
start = "2023-10-03T05:00:00",
end =  "2023-10-03T11:00:00", parse=F
)
devtools::load_all(".")
res <- bahn_search(
from = wi$id[1],
to = adam$id[1],
start = "2023-10-03T05:00:00",
end =  "2023-10-03T11:00:00", parse=F
)
x <- res
purrr::map(x[["verbindungen"]], function(v) {
n_abschnitt <- length(v[["verbindungsAbschnitte"]])
tibble::tibble(
id = v[["tripId"]],
duration = v[["verbindungsDauerInSeconds"]],
price = v[["angebotsPreis"]][["betrag"]],
changes = v[["umstiegsAnzahl"]],
start = v[["verbindungsAbschnitte"]][[1]][["ankunftsZeitpunkt"]],
end = v[["verbindungsAbschnitte"]][[n_abschnitt]][["ankunftsZeitpunkt"]]
)
}) |>
dplyr::bind_rows() |>
dplyr::mutate(
start = lubridate::force_tz(lubridate::ymd_hms(start), "Europe/Berlin"),
end = lubridate::force_tz(lubridate::ymd_hms(end), "Europe/Berlin"),
duration = lubridate::as.duration(duration)
)
x <- unlist(x, recursive = F)
purrr::map(x[["verbindungen"]], function(v) {
n_abschnitt <- length(v[["verbindungsAbschnitte"]])
tibble::tibble(
id = v[["tripId"]],
duration = v[["verbindungsDauerInSeconds"]],
price = v[["angebotsPreis"]][["betrag"]],
changes = v[["umstiegsAnzahl"]],
start = v[["verbindungsAbschnitte"]][[1]][["ankunftsZeitpunkt"]],
end = v[["verbindungsAbschnitte"]][[n_abschnitt]][["ankunftsZeitpunkt"]]
)
}) |>
dplyr::bind_rows() |>
dplyr::mutate(
start = lubridate::force_tz(lubridate::ymd_hms(start), "Europe/Berlin"),
end = lubridate::force_tz(lubridate::ymd_hms(end), "Europe/Berlin"),
duration = lubridate::as.duration(duration)
)
x <- res
View(x)
devtools::load_all(".")
parse_response(res)
devtools::load_all(".")
parse_response(res)
next_tuesday <- bahn_search(
from = wi$id[1],
to = adam$id[1],
start = "2023-10-03T05:00:00",
end =  "2023-10-03T11:00:00"
)
next_tuesday
next_tuesday <- bahn_search(
from = wi$id[1],
to = adam$id[1],
start = "2023-10-03T05:00:00",
end =  "2023-10-03T19:00:00"
)
next_tuesday
library(tidyverse)
next_tuesday |>
slice_min(price, n = 1)
next_tuesday |>
slice_min(price, n = 1) |>
select(-id)
next_tuesday |>
ggplot(aes(x = start, y = price)) +
geom_col() +
theme_minimal()
next_tuesday |>
ggplot(aes(x = start, y = price, label = price)) +
geom_col() +
geom_text() +
theme_minimal()
next_tuesday |>
ggplot(aes(x = start, y = price, label = price)) +
geom_col() +
geom_text(aes(y = price / 2)) +
theme_minimal()
next_tuesday |>
filter(!is.na(price)) |>
ggplot(aes(x = start, y = price, label = price)) +
geom_col() +
geom_text(aes(y = price / 2)) +
theme_minimal()
next_tuesday |>
filter(!is.na(price)) |>
# some connections include trains from different companies, the prices for
# these are not oncluded
ggplot(aes(x = start, y = price, label = price)) +
geom_col() +
geom_text(aes(y = price / 2), colour = "white") +
theme_minimal()
next_tuesday |>
filter(!is.na(price))
next_tuesday |>
filter(!is.na(price)) |>
# some connections include trains from different companies, the prices for
# these are not oncluded
ggplot(aes(x = start, y = price, label = changes)) +
geom_col() +
geom_text(aes(y = price / 2), colour = "white") +
theme_minimal()
next_tuesday |>
filter(!is.na(price)) |>
# some connections include trains from different companies, the prices for
# these are not oncluded
ggplot(aes(x = start, y = price, label = changes)) +
geom_col() +
geom_text(aes(y = price / 2), colour = "white") +
theme_minimal() +
labs(x = "depature", y = NULL,
title = "Prices and number of changes for different connections")
next_tuesday |>
filter(!is.na(price)) |>
# some connections include trains from different companies, the prices for
# these are not oncluded
ggplot(aes(x = start, y = price, label = changes)) +
geom_col() +
geom_text(aes(y = price / 2), colour = "white") +
theme_minimal() +
scale_y_continuous(labels = function(x) paste0(x, "€"))
next_tuesday |>
filter(!is.na(price)) |>
# some connections include trains from different companies, the prices for
# these are not oncluded
ggplot(aes(x = start, y = price, label = changes)) +
geom_col() +
geom_text(aes(y = price / 2), colour = "white") +
theme_minimal() +
scale_y_continuous(labels = function(x) paste0(x, "€")) +
labs(x = "depature", y = NULL,
title = "Prices and number of changes for different connections")
next_tuesday |>
filter(!is.na(price)) |>
# some connections include trains from different companies, the prices for
# these are not oncluded
ggplot(aes(x = start, y = price, label = changes, fill = duration)) +
geom_col() +
geom_text(aes(y = price / 2), colour = "white") +
theme_minimal() +
scale_y_continuous(labels = function(x) paste0(x, "€")) +
labs(x = "depature", y = NULL,
title = "Prices and number of changes for different connections")
ggplot(aes(x = start, y = price, label = changes, fill = duration)) +
geom_col() +
geom_text(aes(y = price / 2), colour = "white") +
theme_minimal() +
scale_y_continuous(labels = function(x) paste0(x, "€")) +
scale_fill_gradient(labels = function(x) paste0(round(x, 1), "h")) +
labs(x = "depature", y = NULL,
title = "Prices and number of changes for different connections")
next_tuesday |>
# some connections include trains from different companies, the prices for
# these are not oncluded
filter(!is.na(price)) |>
mutate()
ggplot(aes(x = start, y = price, label = changes, fill = duration)) +
geom_col() +
geom_text(aes(y = price / 2), colour = "white") +
scale_y_continuous(labels = function(x) paste0(x, "€"))
next_tuesday |>
# some connections include trains from different companies, the prices for
# these are not oncluded
filter(!is.na(price)) |>
ggplot(aes(x = start, y = price, label = changes, fill = duration)) +
geom_col() +
geom_text(aes(y = price / 2), colour = "white") +
scale_y_continuous(labels = function(x) paste0(x, "€")) +
scale_fill_gradient(labels = function(x) paste0(round(x, 1), "h")) +
labs(x = "depature", y = NULL,
title = "Prices and number of changes for different connections") +
theme_minimal()
next_tuesday |>
# some connections include trains from different companies, the prices for
# these are not oncluded
filter(!is.na(price)) |>
ggplot(aes(x = start, y = price, label = changes, fill = duration)) +
geom_col() +
geom_text(aes(y = price / 2), colour = "white") +
scale_y_continuous(labels = function(x) paste0(x, "€")) +
scale_fill_gradient(labels = function(x) paste0(round(x / 60 / 60, 1), "h")) +
labs(x = "depature", y = NULL,
title = "Prices and number of changes for different connections") +
theme_minimal()
usethis::use_lifecycle("experimental")
usethis::use_lifecycle()
lifecycle::badge('experimental')
usethis::use_lifecycle_badge("experimental")
usethis::use_package("httr2")
usethis::use_package("cli")
devtools::document()
usethis::use_testthat()
usethis::use_gpl3_license()
usethis::use_package("utils")
usethis::use_package("purrr")
usethis::use_package("tibble")
devtools::document()
